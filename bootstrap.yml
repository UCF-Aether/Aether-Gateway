---
- name: Bootstrap RPi LoRaWAN Basic Station gateway
  hosts: all
  remote_user: alarm
  become: yes
  become_method: su
  become_user: root
  gather_facts: no

  # https://blog.knoldus.com/how-to-install-python-in-target-host-using-ansible/
  pre_tasks:
    - name: Check vars
      assert:
        that:
          - gateway_name != ""

    - name: Initialize pacman keyring
      raw: pacman-key --init
      ignore_errors: yes

    - name: Populate ARM
      raw: pacman-key --populate archlinuxarm
      ignore_errors: yes

    - name: Update mirrors
      raw: pacman -Syy --noconfirm 
      ignore_errors: yes

    - name: Install Python
      raw: pacman -S --noconfirm --needed python
      ignore_errors: yes

  tasks:
    - name: Install boot config
      ansible.builtin.copy:
        src: ./sys/config.txt
        dest: /boot/config.txt

    - name: Install kernel cmdline args
      ansible.builtin.copy:
        src: ./sys/cmdline.txt
        dest: /boot/cmdline.txt

    - name: Update system
      community.general.pacman:
        update_cache: yes
        upgrade: yes

    - name: Install packages
      community.general.pacman:
        state: present
        name:
          - inetutils
          - python-pip
          - sudo
          - man
          - ntp
          - jq
          - gcc
          - devtools
          - binutils
          - make
          - cmake
          - glibc
          - usbutils
          - coreutils
          - curl
          - gzip
          - iw
          - elfutils
          - findutils
          - raspberrypi-firmware
          - i2c-tools
          - lm_sensors
          - cronie

    - name: Install Python dependencies
      ansible.builtin.pip:
        name:
          - pynmea2

    - name: Enable systemd services
      ansible.builtin.systemd:
        state: started
        name: "{{ item }}"
      loop: 
        - cronie

    - name: Configure time
      ansible.builtin.shell: |
        timedatectl set-timezone UTC
        timedatectl set-ntp true

    - name: Set as default locale
      command: localectl set-locale LANG=en_US.UTF-8

    - name: Reboot system for changes to take effect
      ansible.builtin.reboot:

- name: Install Basic Station
  hosts: all
  remote_user: alarm
  become: yes
  become_method: su
  become_user: root
  vars:
    install_path: /etc/aether

  tasks:
    - name: Set gateway EUI
      when: gw_eui is undefined
      block:
        - name: Generate gateway EUI
          ansible.builtin.script: ./scripts/geneui.sh
          register: eui

        - name: Set fact 
          set_fact:
            gw_eui: "{{ eui.stdout | trim }}"

    - name: Gateway EUI
      debug:
        msg: "{{ gw_eui }}"

    - name: Install Basic Station
      ansible.builtin.script: ./scripts/install-basicstation.sh
      args:
        creates: /usr/bin/station

    - name: Install templated station config
      ansible.builtin.template:
        src: ./gateway/station.j2
        dest: "{{ install_path }}/station.conf"

    - name: Install remaining station config
      ansible.builtin.copy:
        src: "./gateway/{{ item }}"
        dest: "{{ install_path }}/{{ item }}"
      loop: [version.txt]

    - name: Create scripts directory
      ansible.builtin.file:
        path: "{{ install_path }}/scripts/"
        recurse: true
        state: directory

    - name: Install station scripts
      ansible.builtin.copy:
        src: "./gateway/scripts/{{ item }}"
        dest: "{{ install_path }}/scripts/{{ item }}"
        mode: '755'
      loop: ['init.sh', 'gps.py']

    - name: Setup Gateway GPS cronjob
      ansible.builtin.cron:
        name: "Update gateway GPS location"
        minute: "15"
        job: "python {{ install_path }}/scripts/gps.py"

    - name: Make Basic Station command FIFO
      ansible.builtin.shell: "mkfifo {{ install_path }}/cmd.fifo"
      ignore_errors: yes

    - name: Install Basic Station service
      ansible.builtin.copy:
        src: ./gateway/basicstation.service
        dest: /etc/systemd/system/basicstation.service

    - name: Configure with AWS
      block:
        - name: Checking if gateway already exists
          ansible.builtin.shell: "./scripts/aws-does-gw-exist.sh {{ gw_eui }}"
          register: gateway_exists

        # TODO: Add prompt later
        - name: Updating existing gateway with AWS
          ansible.builtin.script: ./scripts/aws-register-gateway.sh
          environment:
            EXISTS: "1"
          when: "'true' in gateway_exists.stdout"

        - name: Register gateway with AWS
          ansible.builtin.script: ./scripts/aws-register-gateway.sh
          when: "'false' in gateway_exists.stdout"

      when: aws_register is undefined or aws_register is truthy
      become: yes
      become_user: "{{ lookup('env', 'USER') }}"
      delegate_to: localhost
      environment:
        GATEWAY_EUI: "{{ gw_eui }}"
        GATEWAY_NAME: "{{ gateway_name }}"
        AWS_REGION: us-east-1

    - name: Installing AWS secrets
      ansible.builtin.copy:
        src: "./{{ item }}"
        dest: "{{ install_path }}/{{ item }}"
      loop: ['cups.crt', 'cups.key', 'cups.trust', 'cups.uri', 'lns.trust', 'lns.uri']
      when: aws_register is undefined or aws_register is truthy

    - name: Start Basic Station service
      ansible.builtin.systemd:
        name: basicstation
        daemon_reload: yes
        enabled: yes
        state: started
        masked: no
